{"data":{"markdownRemark":{"html":"<p>Creating a kiosk application can be quite a challenge, even if the final product is supposed to be simple in terms of functionality and you're only planning to run it on a small number of devices. For serious projects normally using Ubuntu Core and ssh  would be recommended, to safely maintain and update a big number of kiosk devices at once, and with release of Ubuntu Core 18 quite a few things have changed and are not well documented yet, like snapping Electron apps for instance. While making simple prototype or weekend pet project nobody wants that kind of headache.</p>\n<p>So finding a simpler way is in order </p>\n<p>In this project we are going to use</p>\n<ul>\n<li>Platform: Raspberry Pi 3</li>\n<li>Platform OS: Raspbian</li>\n<li>Development OS: in my case Ubuntu 16.04</li>\n<li>Framework: React 16</li>\n<li>Hosting: Surge</li>\n<li>RealVNC</li>\n</ul>\n<h3>Step 1: Installing Raspbian</h3>\n<h3>Step 2: Install Kiosk for Chromium</h3>\n<h3>Step 3: Creating React project</h3>\n<h3>Step 4: Setting up VNC</h3>\n<h3>Step 5: Locking your Kiosk app from it's admin panel</h3>\n<h3>Step 6: Make your app start on boot</h3>\n<p>To make that happen you need to place Kiosk's desktop icon into /startup folder</p>\n<h3>Step 7: Turn screen orientation</h3>\n<h4>Step 7.1: Turn screen orientation</h4>\n<h3>Step 8: Setup application reboot schedule</h3>\n<h3>Step 9: Hide Raspbian cursor</h3>\n<h3>Step 10: Deploy your app</h3>","frontmatter":{"title":"The fastest way to create kiosk application, that you can actually use for ... well, something.","tags":["React","JavaScript","Raspberry Pi","Linux"]}}},"pageContext":{"slug":"/home/vladimir_rdv/Desktop/tmp/myWebsiteSource/kioskApp/"}}