{"data":{"markdownRemark":{"html":"<h3>Hello, everyone : )</h3>\n<p>You’ve read the title, today I want to continue sharing lessons I’ve leaned in a startup company.</p>\n<h3>10. Write code that others can understand, and make sure, that they understand it.</h3>\n<p>Writing code with following best practices and maintaining good structure might not be enough, because code, that looks perfectly readable and structured to you might look like junk to someone else, we all have different habits and understanding of elegance.</p>\n<p>And yet again talking to people saves our </p>\n<p>If your company has established development team meetings(and they really should, at least once every 2 weeks), then that is the perfect place to talk about code structure, naming conventions, code style etc. Writing that stuff down right on the spot is a good idea, to make sure nobody forgets(and that is where stylesheets come from). It will take you at least an hour or two, but it will save you from months of ‘Dude, what is this?’ or ‘What does it do?’</p>\n<p>And once you are all on the same page on how your project should be organised, ask a colleague to have a look at your code once in a while(might not be possible in big teams, but still), just to make sure that someone else can read it.</p>\n<h3>11. Learn why good practices are important</h3>\n<p>Like I said in part I, SOLID, design patterns and best practices exist for a reason. It is important for a developer to be familiar with them, but also you must know the reason why they exist, what is it that they cam protect your project from, what are future benefits.</p>\n<p>In short most of those exist ti save you from technological debt,  to make sure you project is understandable, resistant to change(your new current changes/additions to codebase don’t break something else in the project ).</p>\n<h3>12. Avoid inventing stuff use existing code whenever you can</h3>\n<p>As a programmer I love writing my own code, it is fun and gives me that sense of control, but in big project maintaining something like that will give you a headache in a few weeks.\nLong story short…It is better to depend on a stable secure code package, that you know well, than your own solution, that have never earned a single star on GitHub.</p>\n<p>But when it comes to using libraries and frameworks, choose wisely, make sure that it is a good implementation, look at number of stars GitHub  (if we’re talking about open source), check Issues section, make sure it is a good instrument, and make sure it will help you more than once (YAGNI principle)</p>\n<p>I’m not telling that you should never write your own code, I’m telling that you shouldn’t if there is a better way.</p>\n<h3>13. Realism and practicality</h3>\n<p>These are 2 concepts are, in my opinion something, every software engineer/developer/programmer must remember.</p>\n<p>Realism in this case means, that you must know your current limits, know how much time and effort it will take to overcome them, knowing how much work can be done in a given amount of time, knowing strengths and weaknesses of your team and yourself as a developer.</p>\n<p>Practicality means, that everything in your work must serve a purpose, best practices must not be followed just because you’ve read about those a few days ago, technology must not be used just because it is the newest thing around. Every concept, every line of code, every meeting must add something to the final product.</p>\n<h3>14. Validate your solutions before you implement them</h3>\n<p>To do so write pseudocode and look at number of cases you need to handle</p>\n<p>Even if solution for a problem is already in your head, google it, just to see if there is a better alternative.</p>\n<h3>15. Knowing how to code and knowing how to create a good software product are NOT the same things</h3>\n<h3>16. Be ready for changes</h3>\n<p>If you are in a startup, be ready for your product to change shape, form and concept a dozen of times before and after the initial release.  It is just going to happen, so it is in your best interest to be mentally ready for it. But from what I’ve seen if your code/project structure is good(everything is divided into separate modules/methods/entities and is logically organised), those changes are less stressful and easier to perform.</p>\n<h3>17. Learn to make ‘time to complete’ estimates</h3>\n<p>Stuff like this happens, your boss asks you: “When new feature is going to be ready for production?” .\nYou answer without thinking: “In a week”.</p>\n<p>A 2 weeks later everybody starts “You said 1 week!!!Marketing campaign has already started. Other people depend on result of you”</p>\n<p>And yes, you that did say “1 well”, take responsibility, and next time think before you answer questions like that.</p>\n<p>In future blogposts I’ll share a check list of things you might want to think about before you make any ‘time to complete’ estimates</p>\n<p>Summary </p>\n<p>In this series I’ve talked about meetings, standards, best practices etc. What I’m trying to tell here is that, in every development team(and in every developer) there must be a certain level of discipline when it comes to code quality and organisation. That does not mean, that it has to reach level of unneded bureaucracy. What is very important though is communication in team, all forms of it basically. Company chat, meetings, coffee breaks, all of that should have its place in helping you work as a team and detect problems early on.\nWhen I say ‘know your limits’, I’m not telling you to stop going forward, I saying ‘be in touch with reality’. We all have our limits, strengths and weaknesses, working to improve yourself, that is not something anyone should ever forget about, in order to become a better professional and a better person.</p>\n<p>Thats about it for know, Im not sure if there is going to be a Part III, most of the stuff I have stored is about business side of things from a developer’s perspective. I want to talk to some people before I publish Part III, to se if there is any truth in there.</p>","frontmatter":{"title":"What I’ve learned from being a developer in a startup - Part II","tags":["Soft skills","Developer life","Startups","Best practices","Code quality"]}}},"pageContext":{"slug":"/home/vladimir_rdv/Desktop/myWebsiteSource/Lessons_From_Startup_Part2/"}}