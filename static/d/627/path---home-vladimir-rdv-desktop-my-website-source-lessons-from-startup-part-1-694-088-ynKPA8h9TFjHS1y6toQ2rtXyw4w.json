{"data":{"markdownRemark":{"html":"<!-- What I’ve learned in a from being a developer in a startup - Part I -->\n<h3>Hello, everyone.</h3>\n<p>So today I want to talk about multiple topics that are a mostly of a non-technical nature, but in my opinion are still important for every developer, more so for developers in a startup, more so for junior developers. It is a common knowledge, that startups are rarely easy, they are chaotic, when you compare them to stable businesses, so as a developer you need to apply different ruleset for the way you do your work, so that your software product becomes the best it can be.  </p>\n<p>Btw, even though in this blogpost I want to talk about some things that can be hard to digest for some, that doesn’t change the fact that working in a startup is great, it is hard, but that is a part of what makes it an adventure. You’ll meet new people, you’ll get to develop and learn things, that you probably wouldn’t get to see in a big company. You’ll get to grow up as a developer and as a person. All that makes startups something, that in my opinion every developer should try at least once or twice in their career.</p>\n<p>Some of the things I’m about ton talk about may apply in stable business, and before we begin, everything you’re about to read is based on my experience and I am happy to listen to your criticism, because the proof is in the pudding and truth is in the dialog.</p>\n<h3>1. Startups (and business in general) is not a hackathon</h3>\n<p>Startup’s work rhythm can start to feel like a hackathon (make stuff work asap), but there is an additional layer of responsibility and thought that needs to be applied.</p>\n<p>Your job is not just to create something that works, you must also detect potential problems, not only code based problems, but business problems as well, I’m not telling that you that as a developer you have to do the business part of things, you must if you are a cofounder, but whatever the case you need to understand it.</p>\n<p>And code based problems? Solve them if possible and talk to your team about them if you are having trouble. Don’t keep it to yourself, sooner or later you’ll find yourself doing a task that has some hidden complications, that haven’t been discovered in process of creating a task.</p>\n<p>Plus your solutions must scale and be resistant to change, so following best practices and patterns is very important, both as an individual and a team member.</p>\n<p>That means SOLID, developer meetings, pseudocode, best practices, team communication, all that good stuff, that exists for a reason you know :)</p>\n<h3>2. <code>function quality(time, skill)</code></h3>\n<p>In a startup there is a 90% chance that you’ll get to do something for the first time, because being assigned to do different things is not uncommon in startup companies( it does not seem like a good practice to me, but it is hot is)</p>\n<p>Don’t get me wrong, you MUST know your stuff and keep learning for as long as you breathe( yes, I’ve said it), but when you work on a job, where you have multiple specialisations, you’ll get to the unknown regions sooner rather than later.</p>\n<p>But in these kind of situations delivering top quality solutions, and it is in your own interest, may take more time, and you must admit that and ask for help or more time if needed. Some might say, that delivering code that just works can do the job, but in my opinion that is an illusion. From my experience, you’re just creating a debt, bad code will come to collect, and the bigger your system gets the harder it will be to fix the consequences of your past self’s bad decisions.</p>\n<p><strong>Note:</strong> I keep talking about top quality code, but let me tell, what I mean by that:</p>\n<ul>\n<li>it works and passes all the tests with good performance <em>(thank you, Captain Obvious)</em></li>\n<li>your whole project follows SOLID principles</li>\n<li>other developers can easily read your code <em>(or at least it is not too difficult)</em></li>\n<li>your project structure, naming and organisation is a result of a team’s communication, not just your imagination</li>\n<li>your modules/classes/functions follow DRY and KISS principles, all code for a given task is in one in here, and only here (with knowing the difference between task and process)</li>\n</ul>\n<p><strong>Note:</strong> One more thing, I am talking about top quality code, top quality software product has even more criteria(like “it must solve user’s problem”, good UX/UI, security etc.)</p>\n<h3>3. Communication factor</h3>\n<p>Don’t close off, being a part of a team is not just about working on a project together. Let people know, what you are doing, tell them, if you are having trouble, help them if they are in need of assistance. You most certainly need to be able to do things on your own, nobody should be a parasite, but by communicating with people, you can detect mistakes more easily, get different perspective on a problem and new knowledge, that will speed up the process and improve quality.</p>\n<h3>4. Ego factor</h3>\n<p>I’m not talking about being nice to people, and being a team player, that stuff is a must and from my perspective is too obvious to talk too much about.</p>\n<p>I’m talking about the way you see your tasks, seeing them as an enjoyable challenges is awesome, but again this is not a hackathon, someone is going to use your product, and they don’t care if you enjoy making it or not.</p>\n<h3>5. Murphy's law</h3>\n<blockquote>\n<p>“Anything that can go wrong will go wrong”</p>\n</blockquote>\n<p>Just remember that, when you try to use “I’ll do it later…” excuse</p>\n<h3>6. Never stop learning and learn well</h3>\n<p>Startup job can devour all of your learning time, that’s how it is, but again if that is the case, talking to your team might lead to a solution</p>\n<p>Some might say ‘I learn as I go’, and that is great, but learning on the go does have it’s flaws, most notable is not getting the big picture, when it comes to technology you’re using, as a result you are sacrificing quality for speed again( and quality debt will come to haunt you and your company anyway)</p>\n<p>So healthy learning patterns must take place in your professional life, for me it came out to be 40% theory and 60% practice and experiments.\n(I may or may not talk about learning how to learn in future blogposts)</p>\n<p>As far as I know, trouble is coming, when you learning pattern is broken or non existent.</p>\n<h3>7. Learn not only coding, but communication and negotiating as well</h3>\n<p>You’re doing everyone a favour(yourself included) by being easier to talk to, easier to cooperate with.</p>\n<h3>8. Work hard, work smart, work with passion, but don’t burn yourself to crisp</h3>\n<p>Working hard is a good idea.\nFinding productive ways to be lazy is a great idea.\nResting from time to time, finding time for friends and family is the best idea you can get.</p>\n<p>I’d say that’s enough for now, there are more lessons I want to talk about, there is too much for a single blogpost, so se ya</p>","frontmatter":{"title":"What I’ve learned in a from being a developer in a startup - Part I","tags":["Soft skills","Developer life","Startup","Best practices","Code quality"]}}},"pageContext":{"slug":"/home/vladimir_rdv/Desktop/myWebsiteSource/Lessons_From_Startup_Part1/"}}